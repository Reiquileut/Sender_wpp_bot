#!/usr/bin/env python3
"""
WhatsApp Messenger CLI - Interface de linha de comando para o servi√ßo WhatsApp Messenger.
Permite envio de mensagens, gerenciamento de sess√µes e administra√ß√£o do servi√ßo via terminal.
"""

import argparse
import sys
import os
import requests
import json
import pandas as pd
import time
import datetime
import subprocess
import signal
import logging
from tabulate import tabulate
from pathlib import Path

# Configura√ß√µes do logger
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("whatsapp_cli.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("whatsapp-cli")

# Constantes
DEFAULT_API_URL = "http://localhost:3000/api"
CONFIG_DIR = os.path.expanduser("~/.whatsapp-cli")
CONFIG_FILE = os.path.join(CONFIG_DIR, "config.json")
SERVER_PID_FILE = os.path.join(CONFIG_DIR, "server.pid")
QR_IMAGE_PATH = os.path.join(CONFIG_DIR, "qrcode.png")

class WhatsAppCLI:
    """Classe principal CLI para o servi√ßo WhatsApp Messenger."""
    
    def __init__(self):
        self._ensure_config_dir()
        self.config = self._get_config()
        self.api_url = self.config.get('api_url', DEFAULT_API_URL)
        self.token = self.config.get('token', '')
        self.user_id = self.config.get('user_id', '')
    
    def _ensure_config_dir(self):
        """Garante que o diret√≥rio de configura√ß√£o existe."""
        os.makedirs(CONFIG_DIR, exist_ok=True)
    
    def _get_config(self):
        """Carrega configura√ß√£o do arquivo."""
        if os.path.exists(CONFIG_FILE):
            try:
                with open(CONFIG_FILE, 'r') as f:
                    return json.load(f)
            except json.JSONDecodeError:
                logger.error("Arquivo de configura√ß√£o corrompido. Usando configura√ß√µes padr√£o.")
        return {}
    
    def _save_config(self, config):
        """Salva configura√ß√£o no arquivo."""
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=2)
    
    def _make_request(self, method, endpoint, **kwargs):
        """Faz uma requisi√ß√£o para a API."""
        url = f"{self.api_url}/{endpoint}"
        headers = kwargs.pop('headers', {})
        
        # Adiciona o token de autentica√ß√£o se dispon√≠vel
        if self.token:
            headers['Authorization'] = f"Bearer {self.token}"
        
        try:
            response = requests.request(
                method, 
                url, 
                headers=headers, 
                **kwargs
            )
            
            if response.status_code == 401:
                logger.error("Erro de autentica√ß√£o. Fa√ßa login novamente.")
                sys.exit(1)
                
            return response
        except requests.RequestException as e:
            logger.error(f"Erro na requisi√ß√£o: {e}")
            return None
    
    def check_status(self, verbose=True):
        """Verifica o status da conex√£o WhatsApp."""
        response = self._make_request('GET', 'status')
        
        if not response:
            if verbose:
                print("‚ùå Servidor n√£o dispon√≠vel. Verifique se o servidor est√° rodando.")
            return False
            
        if response.status_code != 200:
            if verbose:
                print(f"‚ùå Erro ao verificar status: {response.status_code}")
            return False
            
        data = response.json()
        ready = data.get('ready', False)
        
        if verbose:
            if ready:
                print("‚úÖ WhatsApp conectado e pronto para uso")
            elif data.get('qrCode', False):
                print("‚ö†Ô∏è Aguardando autentica√ß√£o. Use o comando 'login' para scanear o QR code.")
            else:
                print("‚ö†Ô∏è Servidor iniciado mas aguardando gera√ß√£o de QR code.")
        
        return ready
    
    def login(self):
        """Gera e exibe o QR code para autentica√ß√£o."""
        import qrcode
        from PIL import Image
        
        print("Requisitando QR code para autentica√ß√£o...")
        response = self._make_request('GET', 'qrcode')
        
        if not response:
            print("‚ùå N√£o foi poss√≠vel conectar ao servidor.")
            return
            
        if response.status_code == 202:
            print("‚è≥ Servidor reiniciando sess√£o. Aguarde 5 segundos e tente novamente.")
            return
            
        if response.status_code != 200:
            print(f"‚ùå Erro ao obter QR code: {response.status_code}")
            return
            
        data = response.json()
        qr_text = data.get('qrCodeText')
        
        if not qr_text:
            print("‚ùå QR code n√£o dispon√≠vel. Tente reiniciar a sess√£o com 'reset'.")
            return
            
        # Salva e exibe o QR code
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(qr_text)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        img.save(QR_IMAGE_PATH)
        
        print(f"QR code salvo em: {QR_IMAGE_PATH}")
        
        # Tenta abrir o QR code automaticamente
        try:
            if sys.platform == "linux":
                subprocess.call(["xdg-open", QR_IMAGE_PATH])
            elif sys.platform == "darwin":  # macOS
                subprocess.call(["open", QR_IMAGE_PATH])
            elif sys.platform == "win32":
                os.startfile(QR_IMAGE_PATH)
        except:
            # Falha silenciosa se n√£o conseguir abrir
            pass
            
        print("‚ö†Ô∏è Escaneie o QR code com seu WhatsApp para autenticar.")
        print("‚è≥ Aguardando autentica√ß√£o...")
        
        # Aguarda at√© que o cliente esteja pronto
        for i in range(30):  # Tenta por 30 segundos
            time.sleep(1)
            if self.check_status(verbose=False):
                print("‚úÖ WhatsApp conectado com sucesso!")
                return
        
        print("‚ö†Ô∏è Tempo limite excedido. Verifique o status com 'status'.")
    
    def send_text(self, number, message):
        """Envia uma mensagem de texto para um n√∫mero."""
        if not self.check_status(verbose=False):
            print("‚ùå WhatsApp n√£o est√° conectado. Use 'login' para conectar.")
            return
            
        print(f"Enviando mensagem para {number}...")
        response = self._make_request(
            'POST', 
            'send-message',
            json={"number": number, "message": message}
        )
        
        if not response:
            print("‚ùå Falha ao enviar mensagem.")
            return
            
        if response.status_code != 200:
            error = response.json().get('error', 'Erro desconhecido')
            print(f"‚ùå Falha ao enviar mensagem: {error}")
            return
            
        data = response.json()
        print(f"‚úÖ Mensagem enviada com sucesso! ID: {data.get('messageId', 'N/A')}")
    
    def send_file(self, number, file_path, caption=""):
        """Envia um arquivo para um n√∫mero."""
        if not self.check_status(verbose=False):
            print("‚ùå WhatsApp n√£o est√° conectado. Use 'login' para conectar.")
            return
            
        if not os.path.exists(file_path):
            print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
            return
            
        print(f"Enviando arquivo para {number}...")
        
        with open(file_path, 'rb') as f:
            filename = os.path.basename(file_path)
            files = {'file': (filename, f)}
            data = {'number': number}
            
            if caption:
                data['caption'] = caption
                
            response = self._make_request(
                'POST', 
                'send-file',
                data=data,
                files=files
            )
        
        if not response:
            print("‚ùå Falha ao enviar arquivo.")
            return
            
        if response.status_code != 200:
            error = response.json().get('error', 'Erro desconhecido')
            print(f"‚ùå Falha ao enviar arquivo: {error}")
            return
            
        data = response.json()
        print(f"‚úÖ Arquivo enviado com sucesso! ID: {data.get('messageId', 'N/A')}")
    
    def send_batch(self, file_path, message=None, files=None, interval=3, random_delay=True):
        """Envia mensagens em lote a partir de um arquivo CSV/XLSX."""
        if not self.check_status(verbose=False):
            print("‚ùå WhatsApp n√£o est√° conectado. Use 'login' para conectar.")
            return
        
        if not os.path.exists(file_path):
            print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
            return
            
        if not message and not files:
            print("‚ùå √â necess√°rio fornecer uma mensagem ou arquivos para enviar.")
            return
            
        # Carrega os contatos do arquivo
        try:
            if file_path.lower().endswith('.csv'):
                df = pd.read_csv(file_path)
            elif file_path.lower().endswith(('.xls', '.xlsx')):
                df = pd.read_excel(file_path)
            else:
                print("‚ùå Formato de arquivo n√£o suportado. Use CSV ou XLSX.")
                return
                
            contacts = df.iloc[:, 0].dropna().astype(str).tolist()
            print(f"üìã Carregados {len(contacts)} contatos do arquivo.")
            
        except Exception as e:
            print(f"‚ùå Erro ao ler arquivo: {str(e)}")
            return
            
        # Verifica se os arquivos existem
        if files:
            for file in files:
                if not os.path.exists(file):
                    print(f"‚ùå Arquivo n√£o encontrado: {file}")
                    return
        
        # Prepara para o envio
        successful = []
        failed = []
        errors = {}
        
        # Processamento do token (simulado)
        tokens_needed = len(contacts) * (1 + len(files) if files else 0)
        print(f"ü™ô Tokens necess√°rios para esta opera√ß√£o: {tokens_needed}")
        print(f"ü™ô Simula√ß√£o: tokens dispon√≠veis suficientes.")
        
        # Inicia o envio em lote
        print(f"üì§ Iniciando envio para {len(contacts)} contatos...")
        start_time = time.time()
        
        for i, number in enumerate(contacts, 1):
            print(f"[{i}/{len(contacts)}] Processando {number}...")
            success = True
            
            # Envia mensagem de texto
            if message:
                response = self._make_request(
                    'POST', 
                    'send-message',
                    json={"number": number, "message": message}
                )
                
                if not response or response.status_code != 200:
                    error_msg = "Erro de conex√£o" if not response else response.json().get('error', 'Erro desconhecido')
                    print(f"  ‚ùå Falha ao enviar texto: {error_msg}")
                    success = False
                    errors[number] = error_msg
                else:
                    print(f"  ‚úÖ Texto enviado com sucesso")
            
            # Envia arquivos
            if files and success:
                for file_path in files:
                    filename = os.path.basename(file_path)
                    print(f"  üìé Enviando arquivo: {filename}")
                    
                    with open(file_path, 'rb') as f:
                        response = self._make_request(
                            'POST',
                            'send-file',
                            data={'number': number},
                            files={'file': (filename, f)}
                        )
                    
                    if not response or response.status_code != 200:
                        error_msg = "Erro de conex√£o" if not response else response.json().get('error', 'Erro desconhecido')
                        print(f"  ‚ùå Falha ao enviar arquivo {filename}: {error_msg}")
                        success = False
                        errors[number] = error_msg
                        break
                    else:
                        print(f"  ‚úÖ Arquivo {filename} enviado com sucesso")
            
            # Registra o resultado
            if success:
                successful.append(number)
            else:
                failed.append(number)
            
            # Calcula estat√≠sticas e tempo estimado
            elapsed = time.time() - start_time
            avg_time = elapsed / i
            remaining = len(contacts) - i
            estimated = avg_time * remaining
            
            print(f"‚è±Ô∏è Progresso: {i}/{len(contacts)} | Restante: ~{int(estimated/60)}m{int(estimated%60)}s")
            
            # Aguarda antes do pr√≥ximo envio
            if i < len(contacts):
                delay = interval
                if random_delay:
                    import random
                    delay += random.randint(1, 3)
                print(f"‚è≥ Aguardando {delay}s antes do pr√≥ximo envio...")
                time.sleep(delay)
        
        # Estat√≠sticas finais
        total_time = time.time() - start_time
        print("\nüìä Relat√≥rio de Envio:")
        print(f"Total de contatos: {len(contacts)}")
        print(f"‚úÖ Enviados com sucesso: {len(successful)}")
        print(f"‚ùå Falhas: {len(failed)}")
        
        if len(contacts) > 0:
            success_rate = (len(successful) / len(contacts)) * 100
            print(f"üìà Taxa de sucesso: {success_rate:.1f}%")
        
        print(f"‚è±Ô∏è Tempo total: {int(total_time/60)}m{int(total_time%60)}s")
        
        # Exporta falhas para um arquivo CSV se houver alguma
        if failed:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            failures_file = f"falhas_{timestamp}.csv"
            
            with open(failures_file, 'w') as f:
                f.write("numero,erro\n")
                for number in failed:
                    f.write(f"{number},{errors.get(number, 'Erro desconhecido')}\n")
            
            print(f"üìÑ N√∫meros com falha exportados para: {failures_file}")
    
    def analyze_number(self, number):
        """Analisa o formato de um n√∫mero de telefone."""
        response = self._make_request(
            'POST',
            'analyze-number',
            json={"number": number}
        )
        
        if not response:
            print("‚ùå N√£o foi poss√≠vel conectar ao servidor.")
            return
            
        if response.status_code != 200:
            print(f"‚ùå Erro ao analisar n√∫mero: {response.status_code}")
            return
            
        data = response.json()
        
        print("üì± An√°lise de N√∫mero:")
        print(f"N√∫mero original: {data.get('original')}")
        print(f"N√∫mero limpo: {data.get('cleaned')}")
        print(f"N√∫mero formatado: {data.get('formattedNumber')}")
        
        country_info = data.get('countryInfo', {})
        print(f"Pa√≠s: {country_info.get('country', 'Desconhecido')}")
        print(f"C√≥digo do pa√≠s: {country_info.get('code', 'N/A')}")
        print(f"Formato reconhecido: {'Sim' if country_info.get('isFormatted', False) else 'N√£o'}")
    
    def batch_analyze(self, file_path):
        """Analisa um lote de n√∫meros de telefone a partir de um arquivo."""
        if not os.path.exists(file_path):
            print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
            return
            
        # Carrega os n√∫meros do arquivo
        try:
            if file_path.lower().endswith('.csv'):
                df = pd.read_csv(file_path)
            elif file_path.lower().endswith(('.xls', '.xlsx')):
                df = pd.read_excel(file_path)
            else:
                print("‚ùå Formato de arquivo n√£o suportado. Use CSV ou XLSX.")
                return
                
            numbers = df.iloc[:, 0].dropna().astype(str).tolist()
            print(f"üìã Carregados {len(numbers)} n√∫meros do arquivo.")
            
        except Exception as e:
            print(f"‚ùå Erro ao ler arquivo: {str(e)}")
            return
        
        # Envia para an√°lise
        response = self._make_request(
            'POST',
            'analyze-batch',
            json={"numbers": numbers}
        )
        
        if not response:
            print("‚ùå N√£o foi poss√≠vel conectar ao servidor.")
            return
            
        if response.status_code != 200:
            print(f"‚ùå Erro ao analisar n√∫meros: {response.status_code}")
            return
            
        data = response.json()
        stats = data.get('stats', {})
        results = data.get('results', [])
        
        # Exibe estat√≠sticas
        print("\nüìä Estat√≠sticas:")
        print(f"Total de n√∫meros: {stats.get('total', 0)}")
        print(f"N√∫meros com formato reconhecido: {stats.get('formatted', 0)}")
        
        # Exibe distribui√ß√£o por pa√≠s
        print("\nüåé Distribui√ß√£o por pa√≠s:")
        for country, count in stats.get('byCountry', {}).items():
            print(f"- {country}: {count} n√∫meros")
        
        # Exporta resultados para um arquivo CSV
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"analise_numeros_{timestamp}.csv"
        
        with open(output_file, 'w') as f:
            f.write("numero_original,numero_formatado,pais,codigo_pais\n")
            for result in results:
                country_info = result.get('countryInfo', {})
                f.write(f"{result.get('original', '')},{result.get('formattedNumber', '')},{country_info.get('country', 'Desconhecido')},{country_info.get('code', '')}\n")
        
        print(f"\nüìÑ An√°lise completa exportada para: {output_file}")
        
        # Pergunta se deseja usar os n√∫meros formatados
        while True:
            choice = input("\nDeseja usar os n√∫meros formatados para envio? (s/n): ").lower()
            if choice in ('s', 'sim', 'y', 'yes'):
                # Exporta n√∫meros formatados
                formatted_file = f"numeros_formatados_{timestamp}.csv"
                with open(formatted_file, 'w') as f:
                    for result in results:
                        f.write(f"{result.get('formattedNumber', '')}\n")
                print(f"üìÑ N√∫meros formatados exportados para: {formatted_file}")
                break
            elif choice in ('n', 'n√£o', 'nao', 'no'):
                print("Opera√ß√£o cancelada.")
                break
            else:
                print("Op√ß√£o inv√°lida. Digite 's' para sim ou 'n' para n√£o.")
    
    def start_server(self, port=None):
        """Inicia o servidor WhatsApp."""
        # Verifica se o servidor j√° est√° rodando
        if os.path.exists(SERVER_PID_FILE):
            with open(SERVER_PID_FILE, 'r') as f:
                pid = f.read().strip()
            
            try:
                os.kill(int(pid), 0)  # Testa se o processo existe
                print(f"‚ö†Ô∏è Servidor j√° est√° rodando (PID: {pid}).")
                return
            except OSError:
                # Processo n√£o existe, remove o arquivo PID
                os.remove(SERVER_PID_FILE)
        
        # Define a porta
        if port:
            port_arg = f"--port={port}"
        else:
            port_arg = ""
        
        # Encontra o caminho para o arquivo server.js
        server_js = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "server", "server.js")
        
        if not os.path.exists(server_js):
            print(f"‚ùå Arquivo server.js n√£o encontrado em {server_js}")
            return
        
        # Inicia o servidor
        try:
            print("üöÄ Iniciando servidor WhatsApp...")
            
            # Direciona sa√≠da para arquivos de log
            log_file = open("server_log.txt", "w")
            error_log = open("server_error_log.txt", "w")
            
            # Inicia o processo
            process = subprocess.Popen(
                ["node", server_js, port_arg],
                stdout=log_file,
                stderr=error_log,
                preexec_fn=os.setsid,  # Permite matar o processo e seus filhos
                start_new_session=True
            )
            
            # Salva o PID
            with open(SERVER_PID_FILE, 'w') as f:
                f.write(str(process.pid))
            
            print(f"‚úÖ Servidor iniciado com PID: {process.pid}")
            print(f"üìÑ Logs: server_log.txt | Erros: server_error_log.txt")
            
            # Aguarda alguns segundos e verifica o status
            time.sleep(5)
            self.check_status()
            
        except Exception as e:
            print(f"‚ùå Erro ao iniciar servidor: {str(e)}")
    
    def stop_server(self):
        """Para o servidor WhatsApp."""
        if not os.path.exists(SERVER_PID_FILE):
            print("‚ö†Ô∏è Servidor n√£o est√° rodando.")
            return
            
        try:
            with open(SERVER_PID_FILE, 'r') as f:
                pid = int(f.read().strip())
                
            print(f"üõë Parando servidor (PID: {pid})...")
            
            # Envia SIGTERM para o grupo de processos
            os.killpg(os.getpgid(pid), signal.SIGTERM)
            
            # Aguarda um momento e verifica se o processo ainda existe
            time.sleep(2)
            try:
                os.kill(pid, 0)
                print("‚ö†Ô∏è Servidor n√£o respondeu ao SIGTERM, for√ßando parada...")
                os.killpg(os.getpgid(pid), signal.SIGKILL)
            except OSError:
                # Processo j√° terminou
                pass
                
            # Remove o arquivo PID
            os.remove(SERVER_PID_FILE)
            print("‚úÖ Servidor parado com sucesso.")
            
        except Exception as e:
            print(f"‚ùå Erro ao parar servidor: {str(e)}")
    
    def reset_session(self):
        """Reinicia a sess√£o do WhatsApp."""
        print("üîÑ Reiniciando sess√£o do WhatsApp...")
        
        response = self._make_request('POST', 'reset-session')
        
        if not response:
            print("‚ùå N√£o foi poss√≠vel conectar ao servidor.")
            return
            
        if response.status_code != 200:
            error = response.json().get('error', 'Erro desconhecido')
            print(f"‚ùå Falha ao reiniciar sess√£o: {error}")
            return
            
        print("‚úÖ Sess√£o reiniciada com sucesso!")
        print("‚ö†Ô∏è Use o comando 'login' para escanear o novo QR code.")
    
    def tokens_status(self):
        """Verifica o status dos tokens (simulado)."""
        print("ü™ô Sistema de Tokens (Simulado)")
        print("Tokens dispon√≠veis: 1000")
        print("Tokens usados este m√™s: 250")
        print("Validade: 31/12/2025")

def main():
    """Ponto de entrada principal para o CLI."""
    parser = argparse.ArgumentParser(description="WhatsApp Messenger CLI")
    subparsers = parser.add_subparsers(dest="command", help="Comando a executar")
    
    # Comando status
    status_parser = subparsers.add_parser("status", help="Verifica o status da conex√£o WhatsApp")
    
    # Comando login
    login_parser = subparsers.add_parser("login", help="Gera QR code para autentica√ß√£o")
    
    # Comando enviar texto
    send_text_parser = subparsers.add_parser("send-text", help="Envia uma mensagem de texto")
    send_text_parser.add_argument("--to", "-t", required=True, help="N√∫mero do destinat√°rio")
    send_text_parser.add_argument("--message", "-m", required=True, help="Texto da mensagem")
    
    # Comando enviar arquivo
    send_file_parser = subparsers.add_parser("send-file", help="Envia um arquivo")
    send_file_parser.add_argument("--to", "-t", required=True, help="N√∫mero do destinat√°rio")
    send_file_parser.add_argument("--file", "-f", required=True, help="Caminho do arquivo")
    send_file_parser.add_argument("--caption", "-c", help="Legenda do arquivo")
    
    # Comando enviar lote
    send_batch_parser = subparsers.add_parser("send-batch", help="Envia mensagens em lote")
    send_batch_parser.add_argument("--file", "-f", required=True, help="Arquivo CSV/XLSX com contatos")
    send_batch_parser.add_argument("--message", "-m", help="Texto da mensagem")
    send_batch_parser.add_argument("--files", nargs="+", help="Arquivos para anexar")
    send_batch_parser.add_argument("--interval", "-i", type=int, default=3, help="Intervalo entre mensagens (segundos)")
    send_batch_parser.add_argument("--no-random", action="store_false", dest="random_delay", help="Desativa varia√ß√£o aleat√≥ria no intervalo")
    
    # Comando analisar n√∫mero
    analyze_parser = subparsers.add_parser("analyze", help="Analisa formato de n√∫mero de telefone")
    analyze_parser.add_argument("--number", "-n", required=True, help="N√∫mero de telefone para analisar")
    
    # Comando analisar lote
    batch_analyze_parser = subparsers.add_parser("batch-analyze", help="Analisa lote de n√∫meros de telefone")
    batch_analyze_parser.add_argument("--file", "-f", required=True, help="Arquivo CSV/XLSX com n√∫meros de telefone")
    
    # Comandos de gerenciamento do servidor
    start_server_parser = subparsers.add_parser("start-server", help="Inicia o servidor WhatsApp")
    start_server_parser.add_argument("--port", "-p", type=int, help="Porta para o servidor")
    
    subparsers.add_parser("stop-server", help="Para o servidor WhatsApp")
    subparsers.add_parser("status-server", help="Verifica o status do servidor")
    
    # Gerenciamento de sess√£o
    subparsers.add_parser("reset", help="Reinicia a sess√£o do WhatsApp")
    
    # Gerenciamento de tokens (placeholder para implementa√ß√£o futura)
    subparsers.add_parser("tokens-status", help="Verifica tokens restantes")
    
    args = parser.parse_args()
    cli = WhatsAppCLI()
    
    if args.command == "status":
        cli.check_status()
    elif args.command == "login":
        cli.login()
    elif args.command == "send-text":
        cli.send_text(args.to, args.message)
    elif args.command == "send-file":
        cli.send_file(args.to, args.file, args.caption)
    elif args.command == "send-batch":
        cli.send_batch(args.file, args.message, args.files, args.interval, args.random_delay)
    elif args.command == "analyze":
        cli.analyze_number(args.number)
    elif args.command == "batch-analyze":
        cli.batch_analyze(args.file)
    elif args.command == "start-server":
        cli.start_server(args.port)
    elif args.command == "stop-server":
        cli.stop_server()
    elif args.command == "status-server":
        cli.check_status()
    elif args.command == "reset":
        cli.reset_session()
    elif args.command == "tokens-status":
        cli.tokens_status()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
