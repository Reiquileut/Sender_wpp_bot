version: '3.8'

services:
  # Serviço principal WhatsApp API
  whatsapp-api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: whatsapp-api
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongo:27017/whatsapp-messenger
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-whatsapp-messenger-default-secret-key}
      - PORT=3000
      - MAX_INSTANCES=${MAX_INSTANCES:-1}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      - whatsapp-sessions:/usr/src/app/whatsapp-session
      - uploads:/usr/src/app/uploads
      - ./logs:/usr/src/app/logs
    depends_on:
      - mongo
      - redis
    networks:
      - whatsapp-network

  # Interface de administração (opcional)
  admin-ui:
    build:
      context: ./admin-ui
      dockerfile: Dockerfile
    container_name: whatsapp-admin-ui
    restart: unless-stopped
    environment:
      - API_URL=http://whatsapp-api:3000
      - PORT=8080
    ports:
      - "${ADMIN_PORT:-8080}:8080"
    depends_on:
      - whatsapp-api
    networks:
      - whatsapp-network

  # Banco de dados MongoDB para persistência
  mongo:
    image: mongo:4.4
    container_name: whatsapp-mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
    volumes:
      - mongo-data:/data/db
    networks:
      - whatsapp-network
    command: --wiredTigerCacheSizeGB 1

  # Redis para cache e gerenciamento de jobs
  redis:
    image: redis:6-alpine
    container_name: whatsapp-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - whatsapp-network

  # Worker para processamento assíncrono
  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: whatsapp-worker
    restart: unless-stopped
    env_file: .env
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongo:27017/whatsapp-messenger
      - REDIS_URL=redis://redis:6379
      - CONCURRENCY=${WORKER_CONCURRENCY:-5}
    volumes:
      - whatsapp-sessions:/usr/src/app/whatsapp-session
      - uploads:/usr/src/app/uploads
    depends_on:
      - mongo
      - redis
      - whatsapp-api
    networks:
      - whatsapp-network

  # Sistema de monitoramento com Prometheus (opcional)
  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: whatsapp-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - whatsapp-network

  # Interface Grafana para visualização de métricas (opcional)
  grafana:
    image: grafana/grafana:8.2.2
    container_name: whatsapp-grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    ports:
      - "3333:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    depends_on:
      - prometheus
    networks:
      - whatsapp-network

  # Nginx para balanceamento de carga e SSL termination
  nginx:
    image: nginx:1.21-alpine
    container_name: whatsapp-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - whatsapp-api
      - admin-ui
    networks:
      - whatsapp-network

networks:
  whatsapp-network:
    driver: bridge

volumes:
  mongo-data:
  redis-data:
  whatsapp-sessions:
  uploads:
  prometheus-data:
  grafana-data:
